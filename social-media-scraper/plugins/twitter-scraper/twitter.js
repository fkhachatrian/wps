var Twitter = require('twitter');
var Promise = require('bluebird');
var events = require('events');
var Bottleneck = require("bottleneck");

var Trends = require('../../models/trends');
var Tweet = require('../../models/tweet');
var Topic = require('../../models/topic');

var client = new Twitter({
  consumer_key: 'YEB02ADEaPmosZCLT4zgpxU9s',
  consumer_secret: 'QqPyJ3foruJen8HKBint2S3F9DkxXqV6v0PAHqxl0Uxlzqj1uX',
  //access_token_key: '2333158698-xsuugyn0fBYKSnp1KaNpDzLPAwWvQYl0XV0cUM2',
  //access_token_secret: 'mqFLy6USR9X9fVOzdICaGGLAKGM75fvdkEOyk07RsxBZv'
  bearer_token: 'AAAAAAAAAAAAAAAAAAAAAByDuwAAAAAAc62cKyiHv81DN2B9U%2BSHf03hhWY%3D2EsUXRuD3CkgP1QLcV5l50lNkanyGZOOicFnvgmTTEK2lrjxO2'
});

// Twitter rate limit 15 requests in 15 minutes
var limiterTrends = new Bottleneck(1, 60000);

var limiterTweets = new Bottleneck(1, 5000);

var queue;

var mongodb = require('mongodb');
var mongoDbQueue = require('mongodb-queue');

var locations = require('./ukraine').locations;

module.exports = function (database) {
    var module = {};
    
    module.scrapeAllTopics = function() {
        mongodb.MongoClient.connect(database.localUrl2, function(err, db) {
            if(err) {
                console.log(err);
                return;
            }

            var deadQueue = mongoDbQueue(db, 'dead-queue')
            queue = mongoDbQueue(db, 'my-queue', { deadQueue : deadQueue });

            Topic.find({last_scraped: null},function (err, topics) {

                if (err) {
                    console.log(err);

                    return;
                }

                for(var i = 0; i < topics.length; i ++) {
                    for(var j = 0; j < locations.length; j ++) {

                      limiterTweets.schedule(scrapeTopic, {topic: topics[i], location: locations[j]});
                    }
                }

            });
        });
    };
    
    module.getTrendingTopics = function() {
        
        limiterTrends.schedule((function() { 
            return new Promise(function(resolve, reject) {
            // WOEID Ukraie 23424976
            var params = {id: '23424976'};

            client.get('trends/place', params, function(error, response){
                    if (error) {
                            console.log(error);
                            reject(error);
                            return;
                    }

                    console.log('Trending data for Ukraine generated by Twitter at ' + response[0].created_at);

                    Trends.findOne({created_at:response[0].created_at}, function (error, trends) {

                            // if there is an error retrieving, send the error. nothing after res.send(err) will execute
                            if (error) {
                                    console.log(error);
                                    reject(error);
                                    return;
                            }

                            if(!trends) {

                                    console.log('Trending data is fresh, saving');

                                    // save the trending info
                                    Trends.create(response[0], function (error, todo) {
                                            if (error) {
                                                    console.log(error);
                                                    reject(error);
                                                    return;
                                            }
                                    });

                                    resolve('Trending data saved');

                                    return;
                            }

                            console.log('Trending data exists, skipping');
                            resolve('Trending data exists, skipping');
                    });
                });
            });
        }));

    };

    module.getAllTweets = function(topic, location, latestTweetId, Tweet, queue) {
        console.log(location.lat+','+location.lon+",10km");
        var options = {
            q: topic.name,
            // Ukraine
            //geocode: '48.379433,31.165579999999977,150km',
            geocode: location.lat+','+location.lon+",15km", 
            result_type: 'recent',
            count: 100,
            since_id: latestTweetId
        };

        var count = 0;
        var totalResults = 0;

        console.log('Starting scraping tweets for topic ' + topic.name);
        console.log('Country: Ukraine');
        console.log('City: ' + location.name);
        console.log('Since ' + latestTweetId);

        // Twitter rate limit 450 requests in 15 minutes
        var rateLimiter = new Bottleneck(1, 5000);

        rateLimiter.schedule(twitterSearchAsync, options).then( getMaxHistory, function(error) {
            console.log(error);
        });

        function getMaxHistory (data) {
            var max_id, oldest, newest;
            if (data.length > 0) {
                totalResults += data.length;

                // get oldest tweet
                max_id = decStrNum(data[data.length - 1].id_str);

                newest = data[0].created_at;
                oldest = data[data.length - 1].created_at;

                options.max_id = max_id;

                for(var i =0; i < data.length; i++) {
                    data[i].topic = topic;
                    data[i].location = location;
                    Tweet.create(data[i], function (error, tweet) { 
                        if (error) {
                            console.log(error);
                            return;
                        }

                        var payload = {
                          text: tweet.text,
                          lang: tweet.lang,
                          location: {
                              name: tweet.location.name,
                              lon: tweet.location.lon,
                              lat: tweet.location.lat
                          },
                          user: tweet.user,
                          topic: {
                              name: topic.name,
                              colorName: topic.colorName
                          },
                          created_at: tweet.created_at,
                          id_str: tweet.id_str
                        };

                        (function(payload) {
                            queue.add(payload, function(err, id) {
                                if(err) {
                                    console.log('Failed adding message sent: ' + payload.id_str + ' - ' + payload.text);
                                    console.log(err);
                                    return;

                                }
                                console.log('Message sent: ' + payload.id_str + ' - ' + payload.text);
                            });
                        })(payload);
                    });

                }
            }

            // this isn't entirely necessary, but its nice to see when debugging and first trying this out
            // each request you can see for yourself that the oldest and newest are going back in time
            // to the next set of 100 tweets
            count++;
            console.log("Requests ", count, max_id, oldest, newest, "\n");

            // if theres no more tweets being returned, break recursion
             if (data.length < 2) {
                // do stuff with your tweets 
                console.log(topic.name + ' scraping complete with ' + totalResults, "\n");
             } else {
                rateLimiter.schedule(twitterSearchAsync, options).then( getMaxHistory, function(error) {
                    console.log(error);
                });
             }
          }
    };
    
    function scrapeTopic(options) {
        var topic = options.topic, location = options.location;

        return new Promise(function(resolve, reject) {
            Tweet.findOne({ "topic.name": topic.name, "location.name":location.name}, {}, {sort:{id_str: -1}}, function (err, tweet) {

                if (err) {
                    console.log(err);
                    reject('No topics found');
                    return;
                }

                var latestTweetId = tweet ? tweet.id_str : null;

                module.getAllTweets(topic, location, latestTweetId, Tweet, queue);
                resolve('Topic scraping started..');
            });

        });
    };

    return module;

};


function twitterSearchAsync(options) {
  return new Promise(function(resolve,reject){
    client.get('search/tweets', options, function(error, data){
      if(!data || !data.statuses) {
          console.log(data);
          reject('No statuses');
          return;
      }

      console.log('Topic: ' + options.q + " - " + data.statuses.length + " results from Twitter");
      resolve(data.statuses);
    });
  });
}

function decStrNum (n) {
    n = n.toString();
    var result=n;
    var i=n.length-1;
    while (i>-1) {
      if (n[i]==="0") {
        result=result.substring(0,i)+"9"+result.substring(i+1);
        i --;
      }
      else {
        result=result.substring(0,i)+(parseInt(n[i],10)-1).toString()+result.substring(i+1);
        return result;
      }
    }
    return result;
}
  