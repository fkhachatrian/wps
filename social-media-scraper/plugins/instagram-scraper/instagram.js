var Instagram = require('instagram-node').instagram();
var Promise = require('bluebird');
var events = require('events');
var Bottleneck = require("bottleneck");

                               
Instagram.use({ access_token: '46081788.ad33cd4.e632f1418d914021804ee3fca991e26a' });
Instagram.use({ 
    client_id: 'ad33cd44c19f43f8b6d24a4de6b52e1b',
    client_secret: '3bab943d96ec4d6c8da2fffdd81b0231' 
});




exports.getTrendingTopics = function(Trends) {

    return new Promise(function(resolve, reject) {
	// WOEID Ukraie 23424976
	var params = {id: '23424976'};

	client.get('trends/place', params, function(error, response){
		if (error) {
			console.log(error);
                        reject(error);
			return;
		}

		console.log('Trending data for Ukraine generated by Twitter at ' + response[0].created_at);

		Trends.findOne({created_at:response[0].created_at}, function (error, trends) {

			// if there is an error retrieving, send the error. nothing after res.send(err) will execute
			if (error) {
				console.log(error);
                                reject(error);
				return;
			}

			if(!trends) {

				console.log('Trending data is fresh, saving');

				// save the trending info
				Trends.create(response[0], function (error, todo) {
					if (error) {
						console.log(error);
                                                reject(error);
						return;
					}
				});
                                
                                resolve('Trending data saved');

				return;
			}

			console.log('Trending data exists, skipping');
                        resolve('Trending data exists, skipping');
		});
	});
    });

};

        
function twitterSearchAsync(options) {
  return new Promise(function(resolve,reject){
    client.get('search/tweets', options, function(error, data){
      if(!data || !data.statuses) {
          console.log(data);
          reject('No statuses');
          return;
      }

      console.log('Topic: ' + options.q + " - " + data.statuses.length + " results from Twitter");
      resolve(data.statuses);
    });
  });
}

function decStrNum (n) {
    n = n.toString();
    var result=n;
    var i=n.length-1;
    while (i>-1) {
      if (n[i]==="0") {
        result=result.substring(0,i)+"9"+result.substring(i+1);
        i --;
      }
      else {
        result=result.substring(0,i)+(parseInt(n[i],10)-1).toString()+result.substring(i+1);
        return result;
      }
    }
    return result;
}

exports.getAllTweets = function(topic, latestTweetId, Tweet) {
    var options = {
        q: topic.name,
        // Ukraine
        geocode: '48.379433,31.165579999999977,677km',
        result_type: 'recent',
        count: 100,
        since_id: latestTweetId
    };
    
    var count = 0;
    var totalResults = 0;
    
    console.log('Starting scraping tweets for topic ' + topic.name);
    console.log('Country: Ukraine');
    console.log('Since ' + latestTweetId);
    
    // Twitter rate limit 450 requests in 15 minutes
    var rateLimiter = new Bottleneck(1, 2000);

    rateLimiter.schedule(twitterSearchAsync, options).then( getMaxHistory, function(error) {
        console.log(error);
    });

    function getMaxHistory (data) {
        var max_id, oldest, newest;
        if (data.length > 0) {
            totalResults += data.length;
            
            // get oldest tweet
            max_id = decStrNum(data[data.length - 1].id_str);

            newest = data[0].created_at;
            oldest = data[data.length - 1].created_at;

            options.max_id = max_id;

            for(var i =0; i < data.length; i++) {
                data[i].topic = topic;
                Tweet.create(data[i], function (error, tweet) { 
                    if (error) {
                        console.log(error);
                        return;
                    }
                });
            }
        }

        // this isn't entirely necessary, but its nice to see when debugging and first trying this out
        // each request you can see for yourself that the oldest and newest are going back in time
        // to the next set of 100 tweets
        count++;
        console.log("Requests ", count, max_id, oldest, newest, "\n");

        // if theres no more tweets being returned, break recursion
         if (data.length < 2) {
            // do stuff with your tweets 
            console.log(topic.name + ' scraping complete with ' + totalResults, "\n");
         } else {
            rateLimiter.schedule(twitterSearchAsync, options).then( getMaxHistory, function(error) {
                console.log(error);
            });
         }
      }
};

exports.getTweets = function(Trends) {

	// WOEID Ukraie 23424976
	var params = {
            q: '#GameofThrones',
            geocode: '48.379433,31.165579999999977,677km',
            result_type: 'recent',
            count: 1,
            until: '2016-05-20'
        };


	client.get('search/tweets',  params, function(error, response){
		if (error) {
                    console.log(error);
                    return;
                }

		console.log('Scraping tweets for ' + params.q);
                console.log(response);
                var j = 0;
                for(var i = 0; i < response.statuses.length; i++) {
                    console.log(response.statuses[i].text);
                    
                    if(response.statuses[i].place != null
                || response.statuses[i].geo != null || response.statuses[i].coordinates != null)
                 { j++;
                    console.log('START >>>>>>>>>>>>>' + i);
                    console.log( response.statuses[i].id);
                    console.log( response.statuses[i].id_str);
                    
                    console.log('END >>>>>>>>>>>>>' + j);

                }
            }
//                // save the trending info
//                Tweet.create(response[0], function (error, todo) {
//                        if (error) {
//                                console.log(error);
//                                return;
//                        }
//                });
	});
};

exports.getInstagramMedia = function(topic, latestMediaId, InstagramMedia) {
    
////    var url = Instagram.get_authorization_url(, { scope: ['public_content'] });
////    console.log(url);
//    
//  Instagram.authorize_user("7dae9eb79b554b90bf0a273f738bf699", "http://localhost", function(err, result) {
//    if (err) {
//      console.log(err.body);
//
//    } else {
//      console.log('Yay! Access token is ' + result.access_token);
//    }
//  });
    
    Instagram.use({ access_token: '46081788.ad33cd4.e632f1418d914021804ee3fca991e26a' });
    
    Instagram.tag_media_recent(topic, function(err, medias, remaining, limit) {
        console.log(err);
        console.log(medias);
    });
};